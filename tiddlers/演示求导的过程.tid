created: 20230616151328196
modified: 20230616151424316
tags: 
title: 演示求导的过程
tmap.id: 0823f11f-f652-41a4-965a-90362538539d

演示求导的过程

<<codes src:"""
from matplotlib.widgets import Slider
import sympy as sp
import numpy as np
import matplotlib.pyplot as plt


# 定义函数
x = sp.symbols('x')
f_expr = 2 ** x
f = sp.lambdify(x, f_expr)

# 绘制函数图像
fig, ax = plt.subplots()
x_values = np.linspace(-10, 10, 1000)
y_values = f(x_values)
ax.plot(x_values, y_values, label='$y=x^2$')

# 添加滑动条控件
x0_slider_ax = plt.axes([0.2, 0.05, 0.6, 0.03])
x1_slider_ax = plt.axes([0.2, 0.02, 0.6, 0.03])
x0_slider = Slider(x0_slider_ax, 'x0', -10, 10, valinit=0)
x1_slider = Slider(x1_slider_ax, 'x1', -10, 10, valinit=1)

# 在滑动条更新时重新绘制图像
def update(val):
    x0 = x0_slider.val
    x1 = x1_slider.val
    y0 = f(x0)
    y1 = f(x1)
    slope = (y1 - y0) / (x1 - x0)
    b = y0 - slope * x0

    # 更新两个点及其连线
    scatter.set_offsets([[x0, y0], [x1, y1]])
    x_values = np.array([x0, x1])
    y_values = slope * x_values + b
    line.set_xdata(x_values)
    line.set_ydata(y_values)


    fig.canvas.draw_idle()

# 绘制两个点及其连线
x0 = x0_slider.val
x1 = x1_slider.val
y0 = f(x0)
y1 = f(x1)
scatter = ax.scatter([x0, x1], [y0, y1], color='red')

slope = (y1 - y0) / (x1 - x0)
b = y0 - slope * x0
line, = ax.plot([x0, x1], [y0, y1], linestyle='--', color='r')

# 添加滑动条更新事件的回调函数
x0_slider.on_changed(update)
x1_slider.on_changed(update)

plt.legend()
plt.show()

""">>